from scipy.stats import logistic
from scipy.optimize import fmin_bfgs

pfun = logistic.cdf

def fmin2(beta ):
      
    
   
    n = X.shape[0] #nobs
    n = X.shape[0] #nobs
    c = np.unique(y)
    v = X.shape[1]
 
#     print(v)
#     theta = beta[:,pc:].flatten() #pc is ncolums and ind_q are levels. So thetas are 15,16,17
    theta = beta[v:] #pc is ncolums and ind_q are levels. So thetas are 15,16,17

#     print(beta)
    
#     gamm  =np.array([-np.Inf ,np.cumsum(np.append(theta[0],theta[1:])), np.Inf]) # vector of -inf cumsum and +inf
#     inter = np.append(theta[0],np.exp(theta[1:]))    
#     gamm0 = np.append(-np.Inf ,np.cumsum(inter))
#     gamm  =np.append(gamm0,np.Inf)
    
    gamm = np.hstack(np.array([-np.inf, np.cumsum(np.append(theta[:1] ,np.exp(theta[1:]))), np.inf]))
#     return gamm
 
    
    offset = 0
    eta = offset
#     return beta[:,:X.shape[1]].T
    
    eta = eta + (np.dot(X,-beta[:v])) #matrix multiplications with beta (non-intercepts) and drop matrix form
    pr = pfun(np.minimum(100, gamm[y] - eta)) - pfun(np.maximum(-100, gamm[y-1] - eta))
    
#     print(pr)

    if (np.all(pr > 0)):
#         return -np.sum(wt*np.log(pr)) 

        return -np.sum(np.log(pr)) 

    else:
        return np.Inf 




def jacobian (theta): ## dgamma by dtheta matrix
    k =  theta.shape[0]
    etheta = np.exp(theta)
    mat =  np.zeros((k, k))
    mat = (mat + etheta) 
    mat[:,0] = 1 
    return np.tril(mat)

jacobian(np.array([1.,3.,8.]))  


def gmin(beta):       
   
    n = x.shape[0] 
    n = x.shape[0] 
    c = np.unique(y)
    v = x.shape[1]
 
    theta = beta[v:] 
       
    gamm = np.hstack(np.array([-np.inf, np.cumsum(np.append(theta[:1] ,np.exp(theta[1:]))), np.inf]))
#     print(theta)

    print(gamm)
     
    eta =  (np.dot(x,-beta[:v]))
    
    z1 = np.minimum(100, gamm[y] - eta)
    z2 = np.maximum(-100, gamm[y-1] - eta)
    pr = cdf(z1) - cdf(z2)  
    
    p1 = pdf(z1)
    
    p2 = pdf(z2)
#     return x.shape, ((p1-p2)/pr).shape
#     return ((p1-p2)/pr).reshape(-1,1)
    g1 =  np.dot(x.T,((p1-p2)/pr).reshape(-1,1)) 
 
    xx = polrY1.T*p1 - polrY2.T*p2
#     return(xx.T )
    g2 =  np.dot(-xx,1/pr)
   
    g2 = np.dot(g2, jacobian(theta))
#     return g2
    return np.append(g1,g2)
 
    
c = np.unique(y)
q = c.shape[0]
c[:q-1]
Y =np.zeros((y.shape[0],q-1)) + c[:q-1]    
    
polrY1  = Y==y[:,None] 
polrY2  = Y==y[:,None]-1

gmin(s1)
